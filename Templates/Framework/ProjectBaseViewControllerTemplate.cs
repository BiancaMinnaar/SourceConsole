//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SourceConsole.Templates.Framework {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class ProjectBaseViewControllerTemplate : ProjectBaseViewControllerTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 6 ""
            this.Write("using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing A" +
                    "cr.UserDialogs;\nusing BasePCL.Networking;\nusing CorePCL;\nusing Newtonsoft.Json;\n" +
                    "using ");
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( DataModel.ProjectName ));
            
            #line default
            #line hidden
            
            #line 13 ""
            this.Write(".Interface.Repository;\nusing ");
            
            #line default
            #line hidden
            
            #line 14 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( DataModel.ProjectName ));
            
            #line default
            #line hidden
            
            #line 14 ""
            this.Write(".Root.ViewModel;\nusing ");
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( DataModel.ProjectName ));
            
            #line default
            #line hidden
            
            #line 15 ""
            this.Write(".Trunk.Repository.Implementation;\nusing Newtonsoft.Json;\nusing Xamarin.Forms;\n\nna" +
                    "mespace ");
            
            #line default
            #line hidden
            
            #line 19 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( DataModel.ProjectName ));
            
            #line default
            #line hidden
            
            #line 19 ""
            this.Write(".Root.ViewController\n{\n    public abstract class ProjectBaseViewController<T> : B" +
                    "aseViewController<T>\n        where T : ProjectBaseViewModel\n    {\n        public" +
                    " IMasterRepository _MasterRepo { get; set; }\n        protected List<BrokenRule> " +
                    "BrokenRules;\n        public bool HasSpecificResponse { get; set; }\n\n        prot" +
                    "ected ProjectBaseViewController()\n            :base(new RestService(DependencySe" +
                    "rvice.Get<INetworkInteraction>()))\n        {\n            _MasterRepo = MasterRep" +
                    "ository.MasterRepo;\n\n            HasSpecificResponse = false;\n            Broken" +
                    "Rules = new List<BrokenRule>();\n            base.NetworkInteractionSucceeded += " +
                    "(sender, e) =>\n            {\n                base._RawBytes = e.RawBytes;\n      " +
                    "          base._ResponseContent = e.NetworkResponseContent;\n            };\n\n    " +
                    "        base.NetworkInteractionFailed += (sender, e) =>\n            {\n          " +
                    "      string mys = e.NetworkCallMessage;\n                UserDialogs.Instance.To" +
                    "ast(new ToastConfig(e.NetworkCallMessage).SetDuration(TimeSpan.FromSeconds(5)).S" +
                    "etBackgroundColor(System.Drawing.Color.FromArgb(193, 57, 43)));\n            };\n " +
                    "           base.NetworkCallInitialised += (sender, e) =>\n            {\n         " +
                    "       UserDialogs.Instance.ShowLoading();\n            };\n            base.Netwo" +
                    "rkCallCompleted += (sender, e) =>\n            {\n                UserDialogs.Inst" +
                    "ance.HideLoading();\n            };\n        }\n\n        /// <summary>\n        /// " +
                    "Serializes the object.\n        /// </summary>\n        /// <param name=\"objectToS" +
                    "erialize\">The object to serialize.</param>\n        /// <returns></returns>\n     " +
                    "   protected override string SerializeObject(T objectToSerialize)\n        {\n    " +
                    "        return JsonConvert.SerializeObject(objectToSerialize);\n        }\n\n      " +
                    "  /// <summary>\n        /// Serializes the type of the object with.\n        /// " +
                    "</summary>\n        /// <typeparam name=\"G\"></typeparam>\n        /// <param name=" +
                    "\"objectToSerialize\">The object to serialize.</param>\n        /// <returns></retu" +
                    "rns>\n        public string SerializeObjectWithType<G>(G objectToSerialize)\n     " +
                    "   {\n            return JsonConvert.SerializeObject(objectToSerialize);\n        " +
                    "}\n\n        /// <summary>\n        /// Deserializes the object.\n        /// </summ" +
                    "ary>\n        /// <typeparam name=\"G\"></typeparam>\n        /// <param name=\"strin" +
                    "gToDeserialize\">The string to deserialize.</param>\n        /// <returns></return" +
                    "s>\n        protected G DeserializeObject<G>(string stringToDeserialize)\n        " +
                    "{\n            var returnObject = JsonConvert.DeserializeObject<G>(stringToDeseri" +
                    "alize);\n            Debug.WriteLine(stringToDeserialize);\n            return ret" +
                    "urnObject;\n        }\n\n        /// <summary>\n        /// Shows the message.\n     " +
                    "   /// </summary>\n        /// <param name=\"message\">The message.</param>\n       " +
                    " public void ShowMessage(string message)\n        {\n            try\n            {" +
                    "\n                var toastOptions = new ToastConfig(message);\n                to" +
                    "astOptions.SetDuration(TimeSpan.FromSeconds(5));\n                toastOptions.Se" +
                    "tBackgroundColor(System.Drawing.Color.Red);\n                toastOptions.SetPosi" +
                    "tion(ToastPosition.Bottom);\n                toastOptions.SetMessageTextColor(Sys" +
                    "tem.Drawing.Color.White);\n\n                UserDialogs.Instance.Toast(message, T" +
                    "imeSpan.FromSeconds(5));\n\n            }\n            catch (Exception ex)\n       " +
                    "     {\n                Debug.WriteLine(ex.Message);\n            }\n        }\n\n   " +
                    "     public void ShowError(string message)\n        {\n            try\n           " +
                    " {\n                var toastOptions = new ToastConfig(message);\n                " +
                    "toastOptions.SetDuration(TimeSpan.FromSeconds(5));\n                toastOptions." +
                    "SetBackgroundColor(System.Drawing.Color.Red);\n                toastOptions.SetPo" +
                    "sition(ToastPosition.Bottom);\n                toastOptions.SetMessageTextColor(S" +
                    "ystem.Drawing.Color.White);\n\n                UserDialogs.Instance.Toast(toastOpt" +
                    "ions);\n            }\n            catch (Exception ex)\n            {\n            " +
                    "    Debug.WriteLine(ex.Message);\n            }\n        }\n\n        /// <summary>\n" +
                    "        /// Validates the broken rules.\n        /// </summary>\n        /// <retu" +
                    "rns></returns>\n        protected string ValidateBrokenRules()\n        {\n        " +
                    "    foreach (BrokenRule check in this.BrokenRules)\n            {\n               " +
                    " if (!check.Check())\n                    return check.Balance;\n            }\n\n  " +
                    "          return \"\";\n        }\n\n        public abstract void SetRepositories();\n" +
                    "\n        /// <summary>\n        /// Sets the service network online.\n        /// " +
                    "</summary>\n        protected virtual void SetServiceNetworkOnline()\n        {\n  " +
                    "      }\n\n        /// <summary>\n        /// Sets the service network offline.\n   " +
                    "     /// </summary>\n        protected virtual void SetServiceNetworkOffline()\n  " +
                    "      {\n        }\n\n        private void SetServiceNetworkAccess(bool isConnected" +
                    ")\n        {\n            if (isConnected)\n                SetServiceNetworkOnline" +
                    "();\n            else\n                SetServiceNetworkOffline();\n        }\n    }" +
                    "\n}\n\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ProjectBaseViewControllerTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
