<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CorePCL;
using <#= DataModel.ProjectName #>.Implementation.ViewModel;
using <#= DataModel.ProjectName #>.Interface.Service;

namespace <#= DataModel.ProjectName #>.Implementation.Service
{
        public class <#= DataModel.ServiceName #><T> : BaseService<T>, <#= DataModel.ServiceInterfaceName #><T>
            where T : BaseViewModel
        {
            public <#= DataModel.ServiceName #>(Func<string, Dictionary<string, ParameterTypedValue>, BaseViewModel, BaseNetworkAccessEnum, Task<T>> networkInterface)
                :base(networkInterface)
            {
            }

        public async Task<T> <#= DataModel.EventName #>(<#= DataModel.ViewModelName #> model)
        {
            string requestURL = "/path/{Parameter}";
            var httpMethod = BaseNetworkAccessEnum.Get;
            var parameters = new Dictionary<string, ParameterTypedValue>()
            {
                //{"Parameter", model.Property},
            };
            return await _NetworkInterface(requestURL, parameters, null, httpMethod);
        }
    }
}
