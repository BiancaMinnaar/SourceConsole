<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System.Threading.Tasks;
using <#= DataModel.ProjectName #>.Implementation.Repository;
using <#= DataModel.ProjectName #>.Implementation.Service;
using <#= DataModel.ProjectName #>.Implementation.ViewModel;
using <#= DataModel.ProjectName #>.Interface.Repository;
using <#= DataModel.ProjectName #>.Interface.Service;
using <#= DataModel.ProjectName #>.Interface.ViewController;
using <#= DataModel.ProjectName #>.Root.ViewController;

namespace <#= DataModel.ProjectName #>.Implementation.ViewController
{
    public class <#= DataModel.ViewControllerName #> : ProjectBaseViewController<<#= DataModel.ViewModelName #>>, I<#= DataModel.ViewControllerName #>
    {
        I<#= DataModel.RepositoryName #><<#= DataModel.ViewModelName #>> _Reposetory;
        I<#= DataModel.ServiceName #><<#= DataModel.ViewModelName #>> _Service;

        public override void SetRepositories()
        {
            _Service = new <#= DataModel.ServiceName #><<#= DataModel.ViewModelName #>>((U, P, C, A) => 
                                                           ExecuteQueryWithReturnTypeAndNetworkAccessAsync<<#= DataModel.ViewModelName #>>(U, P, C, A));
            _Reposetory = new <#= DataModel.RepositoryName #><<#= DataModel.ViewModelName #>>(_MasterRepo, _Service);
        }

        public async Task <#= DataModel.EventName #>()
        {
            
        }
    }
}